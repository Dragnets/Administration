[1mdiff --git a/GUIss.py b/GUIss.py[m
[1mindex 3f5f5d2..e39a71d 100644[m
[1m--- a/GUIss.py[m
[1m+++ b/GUIss.py[m
[36m@@ -8,23 +8,27 @@[m [mfrom tkinter.filedialog import *[m
 from tkinter import Tk, StringVar, ttk[m
 from PIL import ImageTk, Image[m
 import os[m
[32m+[m[32mimport ctypes[m
 [m
 [m
 class TaskGUI():[m
[31m-    def __init__(self,master):[m
[32m+[m[32m    def __init__(self,master,height,width):[m
 [m
[31m-        self.browseActive   = False     # Indicate that btn browse have not been used.[m
[31m-        self.activeBR       = False     # Indicate wether break down have been used.[m
[31m-        self.processUsed    = False     # Indicate wether calculation have been done.[m
[31m-        self.scrollBarActive = False    # Indicate wether expense scroll bar is active[m
[32m+[m[32m        self.browseActive= False    # Indicate that btn browse have not been used.[m
[32m+[m[32m        self.activeBR = False       # Idicate wether break down have been used.[m
[32m+[m[32m        self.processUsed = False    # Idicate wether calculation have been done.[m
[32m+[m[32m        self.canvasID = 1[m
         [m
         # FRAMES Below >>>[m
         logoFrame = Frame(master)[m
         logoFrame.grid(row=0,column=1,sticky=W)[m
[32m+[m
[32m+[m[32m        logo2Frame = Frame(master)[m
[32m+[m[32m        logo2Frame.place(x=height-300,y=width-150)[m
         title     = Frame(master,)[m
         title.grid(row=1,column=2,sticky = W)[m
[31m-        self.header    = Frame(master, )[m
[31m-        self.header.grid(row=2,column=1,sticky=W)[m
[32m+[m[32m        header    = Frame(master, )[m
[32m+[m[32m        header.grid(row=2,column=1,sticky=W)[m
         [m
         self.mainBody  = Frame(master,)[m
         self.mainBody.grid(row=3, column=1, sticky=W)[m
[36m@@ -35,10 +39,11 @@[m [mclass TaskGUI():[m
         gapBR.grid(row=2,column=3)[m
 [m
         # Content[m
[31m-        [m
         # Staff canvas[m
         self.fieldList = Frame(self.mainBody) # Name list[m
         self.fieldList.grid(row=2,column=2, sticky=W)[m
[32m+[m
[32m+[m[41m        [m
         #/Staff canvas[m
         [m
         self.bottom  = Frame(self.mainBody,width=10,height=10,)[m
[36m@@ -47,12 +52,9 @@[m [mclass TaskGUI():[m
         # /Content[m
         [m
         # SUMMAARY[m
[31m-        self.gapSUM = Frame(self.mainBody, width=20,) # GAP for expenses[m
[31m-        self.gapSUM.grid(row= 2, column=3)[m
[31m-        self.gapSummary = Frame(self.mainBody,width=50)[m
[31m-        self.gapSummary.grid(row=2, column=6)         # Gap for Type expenses[m
[31m-        self.fieldSummary =Frame(self.mainBody,width=5,)[m
[31m-        self.fieldSummary.grid(row=2, column=7, sticky= W)[m
[32m+[m[32m        self.gapSUM = Frame(self.mainBody, width=10, bg='green')[m
[32m+[m[32m        self.gapSUM.grid(row= 1, column=4)[m
[32m+[m[32m        #FIELDSUMARY WAS HERE[m
         #/SUMMARY[m
         [m
         #/Frame >>>[m
[36m@@ -62,26 +64,30 @@[m [mclass TaskGUI():[m
         imgLogo.grid(row=1,column=1)[m
         self.img = PhotoImage( file = 'logo.gif')[m
         imgLogo.create_image(10,10, image = self.img, anchor= NW)[m
[32m+[m
[32m+[m[32m        imgLogo2 = Canvas(logo2Frame)[m
[32m+[m[32m        imgLogo2.grid(row=1,column=1)[m
[32m+[m[32m        self.img2 = PhotoImage( file = 'thebrighterchoice.gif')[m
[32m+[m[32m        imgLogo2.create_image(10,10, image = self.img2, anchor=NW)[m
         [m
             [m
         Label(title,height=1).grid(row=1, column=1)#Gap from top[m
         #Label(title, font='mono -36 bold', text="Project PY").grid(column=2,sticky=E)[m
[31m-        Label(self.header,width=3).grid(row=3,column=0,sticky=W)[m
[31m-        Label(self.header,text='File name: ', font='cornsilk -20 bold').grid(row=3, column=1, sticky=W)[m
[31m-        Label(self.header,width=2).grid(row=3, column=3) #SPACE[m
[31m-        self.box = Label(self.header,relief='sunken',width=25,font='Arial -15 bold',anchor=W)[m
[31m-        self.box.grid(row=3,column=2)[m
[32m+[m[32m        Label(header,width=3).grid(row=3,column=0,sticky=W)[m
[32m+[m[32m        Label(header,text='File name: ', font='cornsilk -30 bold').grid(row=3, column=1, sticky=W)[m
[32m+[m[32m        Label(header,width=2).grid(row=3, column=3) #SPACE[m
 [m
[31m-       [m
[32m+[m[32m        self.box = Label(header,width=20,font='arial -20 bold',relief=SUNKEN,anchor=W)[m
[32m+[m[32m        self.box.grid(row=3, column=2)[m
         [m
[31m-        Button(self.header, text='Browse...',width=10,font='mono -15 bold', bg='lightblue',[m
[32m+[m[32m        Button(header, text='Browse...',width=10,font='mono -20 bold', bg='lightblue',[m
                command=self.open_file).grid(row=3, column=4,)[m
[31m-        Label(self.header,width=3,).grid(row=3, column=5) # SPACE[m
[31m-        Button(self.header, text="Process",width=20,font='mono -15 bold',bg='lightgreen',[m
[31m-               command=self.process_file).grid(row=3, column=6,)[m
[31m-        Label(self.header,width=3).grid(row=3, column=7)[m
[31m-        Button (self.header, text="Show/Hide Expenses", width = 15, font = 'mono -15 bold',[m
[31m-                command=self.break_Down).grid(row=3, column=8)[m
[32m+[m[32m        Label(header,width=3,).grid(row=3, column=5) # SPACE[m
[32m+[m[32m##        Button(header, text="Process",width=20,font='mono -20 bold',bg='lightgreen',[m
[32m+[m[32m##               command=self.process_file).grid(row=3, column=6,)[m
[32m+[m[32m##        Label(header,width=3).grid(row=3, column=7)[m
[32m+[m[32m        Button (header, text="Hide Expenses", width = 15, font = 'mono -20 bold',[m
[32m+[m[32m                command=self.destroy_Break_Down).grid(row=3, column=6)[m[41m [m
         [m
         #/Header >>>[m
         [m
[36m@@ -96,7 +102,7 @@[m [mclass TaskGUI():[m
         [m
         Label(self.fieldList,width=18,text='Staff Name',font='arial -20 bold').grid(row=1,column=2)[m
         Label(self.fieldList,width=8,text='Total Cost', font='arial -20 bold').grid(row=1,column=3)[m
[31m-        Label (self.bottom,width=5,).grid(column=1,row=1) # Gap for Total Grand[m
[32m+[m[32m        Label(self.bottom,width=5,).grid(column=1,row=1) # Gap for Total Grand[m
         Label(self.bottom, text='Grand total:', font='arial -20 bold').grid(row=2, column=2, sticky=E)[m
         self.total = Label(self.bottom,width=9, font= 'arial -30 bold',  bg='lightblue')[m
         self.total.grid(row=2, column=3,sticky=E)[m
[36m@@ -107,12 +113,7 @@[m [mclass TaskGUI():[m
         [m
         if self.processUsed == True:[m
             self.leftFrame.destroy()[m
[31m-        filename=self.box['text'] # gets value from self.box[m
[31m-##        if self.browseActive == True:[m
[31m-##            if self.check_combo(self.browsedFile) == True: # Add only to combo box[m
[31m-##                self.fileUsed.append(self.browsedFile)     # if not already Used[m
[31m-##            self.browseActive= False                # Resets browse button status[m
[31m-##            filename=self.browsedFile[m
[32m+[m[32m        filename=self.browsedFile # gets value from self.box[m
 [m
         self.reader=Demonstrator(filename)[m
         self.listAllStaff()[m
[36m@@ -120,41 +121,18 @@[m [mclass TaskGUI():[m
         self.notify()[m
         self.processUsed = True[m
         [m
[31m-[m
     def open_file(self):[m
         '''Ability to browse the file in your computer'''[m
         [m
         self.browsedFile = os.path.basename(askopenfilename(filetypes=[('','')]))[m
[31m-        self.box['text'] = self.browsedFile[m
[31m-        print('lol')[m
[31m-        #self.box.set(self.browsedFile) [m
[32m+[m[32m        self.box['text']= self.browsedFile[m
         self.browseActive= True # To mark that this function has been used.[m
[31m-        [m
[31m-[m
[31m-##    def check_combo(self,filename):[m
[31m-##        '''Check If file alreadi is in combo box'''[m
[31m-##[m
[31m-##        for file in self.fileUsed:[m
[31m-##            if file == filename:[m
[31m-##                return False[m
[31m-##        return True  [m
[31m-##        [m
[31m-##    def combo(self,frame):[m
[31m-##        '''Creates a Combo box and gives 3 default files'''[m
[31m-##        [m
[31m-##        self.box_value = StringVar()[m
[31m-##        self.box = ttk.Combobox(frame, textvariable=self.box_value,[m
[31m-##                                state='readonly') # Creates a combo box[m
[31m-##        self.fileUsed=['Demomax.xlsx'] # Default combo list[m
[31m-##        self.box['values'] = (self.fileUsed) [m
[31m-##        self.box.current(0) # Current value[m
[31m-##        self.box.grid(row=3, column=2)[m
[31m-    [m
[32m+[m[32m        self.process_file()[m
[32m+[m[41m  [m
     def myfunction(self,event):[m
         '''Creates Scroll bar for Canvas'''[m
         [m
[31m-        self.staffCanvas.configure(scrollregion = self.staffCanvas.bbox("all"),width=325, height=400)[m
[31m-[m
[32m+[m[32m        self.staffCanvas.configure(scrollregion = self.staffCanvas.bbox("all"),width=312, height=500)[m
 [m
     def listAllStaff(self,):[m
         ''' Make a list of all staff '''[m
[36m@@ -162,22 +140,22 @@[m [mclass TaskGUI():[m
         self.leftFrame = Frame (self.mainBody,)[m
         self.leftFrame.grid(row=4,column=2, sticky = W)[m
         [m
[31m-        self.leftCanvas(self.leftFrame)[m
[32m+[m[32m        self.leftCanvas()[m
         line=1[m
         self.var  = IntVar() #  Must be self. to disable hover.[m
         staffName = self.reader.staffName()[m
         for name in staffName:[m
             self.NameList  = Radiobutton (self.bodySummary, width=17, text= staffName[name], font= 'arial -20 bold',[m
                                bg='grey', anchor= W, variable = self.var, value = name, pady = 0,[m
[31m-                                          ).grid(row=line, column=2, sticky=W)[m
[32m+[m[32m                                          command=self.break_Down).grid(row=line, column=2, sticky=W)[m
             amount = self.get_Total_Cost_By_Name(name)[m
             self.TotalCost = Label (self.bodySummary,pady=3, width=10, text="\u00A3"+str(amount), font= 'arial -20 bold',[m
                                 bg='grey', ancho=W).grid(row=line, column=3,)[m
             line +=1[m
 [m
[31m-    def leftCanvas(self,frame):[m
[32m+[m[32m    def leftCanvas(self):[m
         '''creates canvas for stafff'''[m
[31m-        [m
[32m+[m
         self.staffCanvas = Canvas (self.leftFrame,)  # 1[m
         self.bodySummary = Frame (self.staffCanvas) #2[m
         myscrollbar = Scrollbar(self.leftFrame, orient="vertical", command=self.staffCanvas.yview) #3[m
[36m@@ -186,9 +164,8 @@[m [mclass TaskGUI():[m
         self.staffCanvas.pack(side="left") #6[m
         self.staffCanvas.create_window((0,0), window=self.bodySummary, anchor= 'nw')[m
         self.leftFrame.bind("<Configure>", self.myfunction)[m
[31m-        frame.bind("<Configure>", self.myfunction)[m
[31m-[m
[31m-        [m
[32m+[m[32m        self.leftFrame.bind("<Configure>", self.myfunction)[m
[32m+[m[41m            [m
     def get_Total_Cost_By_Name(self,ID):[m
         '''Displays cost for each staff '''[m
         [m
[36m@@ -198,55 +175,45 @@[m [mclass TaskGUI():[m
                 return staff_Cost[cost][m
 [m
     def break_Down(self):[m
[31m-        '''Creates a break down list of selected person (layout)'''[m
[32m+[m[32m        '''Creates a break down list of selected person '''[m
 [m
         if self.activeBR:[m
             self.destroy_Break_Down()[m
[32m+[m
[32m+[m[32m        #Label(self.mainBody).grid(row=4,)[m
[32m+[m[32m        self.middleFrame = Frame(self.mainBody)[m
[32m+[m[32m        self.middleFrame.grid(row=4, column=4, sticky=W )[m
             [m
[31m-        [m
[31m-            [m
[31m-        self.field     = Frame(self.mainBody,)              # Break down field[m
[32m+[m[32m        self.field     = Frame(self.mainBody,)      # Break down field[m
         self.field.grid(row=2, column=4, sticky = W)[m
[31m-[m
[31m-[m
[31m-        self.middleFrame    = Frame(self.mainBody)          #Break down Content[m
[31m-        self.middleFrame.grid(row=4,column=4, sticky=NW)[m
         [m
[32m+[m[32m        self.totalSummary = Frame(self.mainBody,)[m
[32m+[m[32m        self.totalSummary.grid(row=4, column= 6, sticky=N)[m
 [m
[31m-        self.totalSummary = Frame(self.mainBody,)           # Spending Type[m
[31m-        self.totalSummary.grid(row=4, column= 7, sticky=N)[m
[32m+[m[32m        self.fieldSummary =Frame(self.mainBody,)[m
[32m+[m[32m        self.fieldSummary.grid(row=2, column=6, sticky= W)[m
 [m
[31m-        [m
         self.activeBR = True[m
         self.staffID = self.var.get()[m
 [m
[31m-        Label(self.field,width=10,text='Date', font='arial -20 bold').grid(row=1,column=1)[m
[31m-        Label(self.field,width=10,text='Location', font='arial -20 bold').grid(row=1,column=2)[m
[31m-        Label(self.field,width=15,text='Reason', font='arial -20 bold').grid(row=1,column=3)[m
[31m-        Label(self.field,width=10,text='Cost', font='arial -20 bold').grid(row=1,column=4)[m
[32m+[m[32m        Label(self.field,width=11,text='Date', font='arial -20 bold',anchor=W).grid(row=1,column=1)[m
[32m+[m[32m        Label(self.field,width=10,text='Location', font='arial -20 bold',anchor=W).grid(row=1,column=2)[m
[32m+[m[32m        Label(self.field,width=13,text='Reason', font='arial -20 bold',anchor=W).grid(row=1,column=3)[m
[32m+[m[32m        Label(self.field,width=10,text='Cost', font='arial -20 bold',anchor=W).grid(row=1,column=4)[m
 [m
[31m-        #Label(self.fieldSummary,width=20).grid(row=1,column=0)[m
[31m-        Label(self.fieldSummary, width=10, text='Reason', font='arial -20 bold').grid(row=1, column=1)[m
[31m-        Label(self.fieldSummary, width=10, text='Total', font =' arial -20 bold').grid(row=1, column=2)[m
[32m+[m[32m        Label(self.mainBody,width=3,bg='blue').grid(row=2,column=5) # GAP from Expences and Spending Type[m
[32m+[m[32m        Label(self.fieldSummary, width=13, text='Reason', font='arial -20 bold',anchor=W).grid(row=1, column=1)[m
[32m+[m[32m        Label(self.fieldSummary, width=13, text='Total', font =' arial -20 bold',anchor=W).grid(row=1, column=2)[m
 [m
         self.work_out_rows()[m
         self.spendingType()[m
 [m
     def work_out_rows(self,):[m
[31m-        '''Generates list of rows for expenses to be ready to put in values'''[m
[31m-[m
[31m-        #<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<[m
[31m-        self.expensesCanvas = Canvas(self.middleFrame, width=550)[m
[31m-        self.body           = Frame(self.expensesCanvas,)[m
[31m-        #myscrollbar = Scrollbar(self.middleFrame, orient="vertical", command=self.expensesCanvas.yview)[m
[31m-        #self.expensesCanvas.configure(yscrollcommand = myscrollbar.set)[m
[31m-        #myscrollbar.pack(side="right",fill='y')[m
[31m-        self.expensesCanvas.pack(side="left")[m
[31m-        self.expensesCanvas.create_window((0,0),window=self.body, anchor='nw')[m
[31m-        #self.body.bind("<Configure>", self.myfunctionTwo) #>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>[m
[31m-        [m
[32m+[m[32m        '''Generates list of rows'''[m
[32m+[m
[32m+[m[32m        self.expenseCanvas()[m
         staff_List = self.reader.displayStaff_Names()[m
[31m-        self.expenseline = 2 # Also for condition to appear scroll bar for expenses.[m
[32m+[m[32m        line =2[m
         for row in  staff_List:[m
             if self.staffID == row[0]:     [m
                 index = 1    [m
[36m@@ -254,49 +221,51 @@[m [mclass TaskGUI():[m
                 location = row[index+2][m
                 reason = row[index+3][m
                 cost =row[index+4][m
[31m-                self.add_row(date, location, reason, cost,self.expenseline)[m
[31m-                self.expenseline +=1[m
[31m-                [m
[31m-        if self.expenseline > 11:[m
[31m-            self.myscrollbar2 = Scrollbar(self.middleFrame, orient="vertical", command=self.expensesCanvas.yview)[m
[31m-            self.expensesCanvas.configure(yscrollcommand = self.myscrollbar2.set)[m
[31m-            self.myscrollbar2.pack(side="right",fill='y')[m
[31m-            self.body.bind("<Configure>", self.myfunctionTwo)[m
[31m-            self.scrollBarActive = True[m
[31m-[m
[31m-        if self.scrollBarActive:[m
[31m-            if self.expenseline < 11:[m
[31m-                self.myscrollbar2.destroy()[m
[31m-                self.scrollBarActive = False[m
[31m-                [m
[31m-                           [m
[31m-[m
[31m-    def myfunctionTwo(self,event):[m
[31m-        self.expensesCanvas.configure(scrollregion=self.expensesCanvas.bbox("all"),height= 200,width= 550)[m
[31m-    [m
[32m+[m[32m                self.add_row(date, location, reason, cost,line)[m
[32m+[m[32m                line +=1[m
[32m+[m[41m        [m
     def add_row(self,date,location, reason,cost,line):[m
         '''Place values in break down list '''        [m
[31m-            [m
[31m-        self.date = Label(self.body,width=10, text=date, font='arial -20 bold',bg='grey')[m
[32m+[m[41m    [m
[32m+[m[32m        self.date = Label(self.body,width=11, text=date, font='arial -20 bold',bg='grey',anchor=W)[m
         self.date.grid(row=line,column=1)[m
[31m-        self.location =Label(self.body,width=10, text=location, font='arial -20 bold', bg='grey')[m
[32m+[m[32m        self.location =Label(self.body,width=10, text=location, font='arial -20 bold', bg='grey',anchor=W)[m
         self.location.grid(row=line,column=2)[m
[31m-        self.reason = Label(self.body,width=15, text=reason, font='arial -20 bold',bg='grey')[m
[32m+[m[32m        self.reason = Label(self.body,width=13, text=reason, font='arial -20 bold',bg='grey',anchor=W)[m
         self.reason.grid(row=line,column=3)[m
[31m-        self.cost = Label(self.body,width=10, text="\u00A3"+str(cost), font='arial -20 bold',bg='grey')[m
[32m+[m[32m        self.cost = Label(self.body,width=10, text="\u00A3"+str(cost), font='arial -20 bold',bg='grey',anchor=W)[m
         self.cost.grid(row=line,column=4)[m
[31m-            [m
[32m+[m
[32m+[m[32m    def expenseCanvas(self,):[m
[32m+[m[32m        '''creates canvas for expenses'''[m
[32m+[m[41m  [m
[32m+[m[32m        self.exCanvas = Canvas(self.middleFrame)  # 1[m
[32m+[m[32m        self.body = Frame(self.exCanvas) #2[m
[32m+[m[32m        myscrollbar = Scrollbar(self.middleFrame, orient="vertical", command=self.exCanvas.yview) #3[m
[32m+[m[32m        self.exCanvas.configure(yscrollcommand = myscrollbar.set) #4[m
[32m+[m[32m        myscrollbar.pack(side='right',fill='y') #5[m
[32m+[m[32m        self.exCanvas.pack(side='left') #6[m
[32m+[m[32m        self.exCanvas.create_window((0,0), window=self.body, anchor='nw',)[m
[32m+[m[32m        self.body.bind('<Configure>', self.myFunction2)[m
[32m+[m
[32m+[m[32m        #self.staffCanvas.create_window((0,0), window=self.bodySummary, anchor= 'nw')[m
[32m+[m
[32m+[m[41m        [m
[32m+[m[32m    def myFunction2(self,event):[m
[32m+[m[32m        self.exCanvas.configure(scrollregion=self.exCanvas.bbox("all"),width=550,height=500)[m
[32m+[m[41m        [m
[32m+[m[41m        [m
     def spendingType(self,):[m
         '''Create a summary of spendings'''[m
 [m
         line = 1[m
[31m-        #Label(self.totalSummary,).grid(row=1,column=0)[m
[32m+[m[32m        Label(self.totalSummary,width=20,).grid(row=1,column=0)[m
         expense = self.reader.displaySpendings(self.staffID)[m
         for key in expense:[m
[31m-            self.spend = Label(self.totalSummary, width=10, text=key, font='arial -20 bold', bg='grey')                    [m
[31m-            self.spend.grid(row=line,column=1,sticky=N)[m
[31m-            self.CostSum = Label(self.totalSummary,width=10, text=expense[key], font='arial -20 bold', bg='grey')                [m
[31m-            self.CostSum.grid(row=line,column=2,sticky=N)[m
[32m+[m[32m            self.spend = Label(self.totalSummary, width=13, text=key, font='arial -20 bold', bg='grey',anchor=W)[m[41m                    [m
[32m+[m[32m            self.spend.grid(row=line,column=0,sticky=N)[m
[32m+[m[32m            self.CostSum = Label(self.totalSummary,width=13, text="\u00A3"+str(expense[key]), font='arial -20 bold', bg='grey',anchor=W)[m[41m                [m
[32m+[m[32m            self.CostSum.grid(row=line,column=1,sticky=N)[m
             line +=1[m
             [m
     def destroy_Break_Down(self):[m
[36m@@ -305,6 +274,7 @@[m [mclass TaskGUI():[m
         self.body.destroy()[m
         self.field.destroy()[m
         self.totalSummary.destroy()[m
[32m+[m[32m        self.fieldSummary.destroy()[m
 [m
     def notify(self):[m
         ''' Get the value from each question to display them on screen '''[m
[36m@@ -321,10 +291,14 @@[m [mclass TaskGUI():[m
 [m
 if __name__ == "__main__":[m
     top =Tk()[m
[31m-    top.geometry('10920x1080')[m
[32m+[m[32m    user32=ctypes.windll.user32[m
[32m+[m[32m    screenSize = user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)[m
[32m+[m[32m    height=screenSize[0][m
[32m+[m[32m    width=screenSize[1][m
[32m+[m[32m    top.geometry(str(height)+"x"+str(width))[m
     top.title("Stella")[m
     top.grid()[m
     [m
[31m-    app = TaskGUI(top)[m
[32m+[m[32m    app = TaskGUI(top,height,width)[m
 [m
     top.mainloop()[m
[1mdiff --git a/thebrighterchoice.gif b/thebrighterchoice.gif[m
[1mnew file mode 100644[m
[1mindex 0000000..c1b1ba6[m
Binary files /dev/null and b/thebrighterchoice.gif differ
